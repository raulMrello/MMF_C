<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\LED_Blink_Flash.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\LED_Blink_Flash.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Mar 25 14:28:06 2015
<BR><P>
<H3>Maximum Stack Usage =        148 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
emitter_exec &rArr; Topic_notify &rArr; Observer_update &rArr; List_add &rArr; malloc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[15]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[16]">CMP0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[1f]">DAC0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[6]">DMA0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[7]">DMA1_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[8]">DMA2_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[9]">DMA3_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[b]">FTFA_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[e]">I2C0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[d]">LLW_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[22]">LPTimer_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[c]">LVD_LVW_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[21]">MCG_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[1c]">PIT_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[24]">PORTA_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[25]">PORTD_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[1b]">RTC_Seconds_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[a]">Reserved20_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[f]">Reserved_25_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[11]">Reserved_27_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[13]">Reserved_29_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[14]">Reserved_30_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[19]">Reserved_35_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[1d]">Reserved_39_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[1e]">Reserved_40_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[23]">Reserved_45_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[10]">SPI0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[2e]">SystemInit</a> from start.o(.text) referenced from startup_mkl05z4.o(.text)
 <LI><a href="#[17]">TPM0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[18]">TPM1_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[20]">TSI0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[12]">UART0_IRQHandler</a> from startup_mkl05z4.o(.text) referenced from startup_mkl05z4.o(.ARM.__at_0x00)
 <LI><a href="#[2f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mkl05z4.o(.text)
 <LI><a href="#[2b]">actuator_exec</a> from led_blink.o(.text) referenced from led_blink.o(.text)
 <LI><a href="#[2c]">actuator_init</a> from led_blink.o(.text) referenced from led_blink.o(.text)
 <LI><a href="#[2a]">actuator_kill</a> from led_blink.o(.text) referenced from led_blink.o(.text)
 <LI><a href="#[2d]">actuator_update</a> from led_blink.o(.text) referenced from led_blink.o(.text)
 <LI><a href="#[28]">emitter_exec</a> from led_blink.o(.text) referenced from led_blink.o(.text)
 <LI><a href="#[29]">emitter_init</a> from led_blink.o(.text) referenced from led_blink.o(.text)
 <LI><a href="#[27]">emitter_kill</a> from led_blink.o(.text) referenced from led_blink.o(.text)
 <LI><a href="#[30]">fputc</a> from retarget.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[26]">main</a> from led_blink.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[31]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[99]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[29]"></a>emitter_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> led_blink.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>emitter_exec</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = emitter_exec &rArr; Topic_notify &rArr; Observer_update &rArr; List_add &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_notify
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_yield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_blink.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>emitter_kill</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> led_blink.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>actuator_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> led_blink.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>actuator_exec</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = actuator_exec &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_yield
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_blink.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>actuator_kill</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> led_blink.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>actuator_update</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> led_blink.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = main &rArr; OS_schedule &rArr; schedule &rArr; Task_setReady &rArr; List_add &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_initialize
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_attach
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_initialize
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_initialize
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_schedule
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_run
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_getMessage
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[37]"></a>gpio_init</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, freedom_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>input_rise</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, freedom_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>input_fall</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, freedom_gpio.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>free</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_done
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_update
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_removeFront
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_remove
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_clear
</UL>

<P><STRONG><a name="[6e]"></a>malloc</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_update
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_add
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_initialize
</UL>

<P><STRONG><a name="[41]"></a>in_char</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getchar
</UL>

<P><STRONG><a name="[43]"></a>out_char</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_second_isr
</UL>

<P><STRONG><a name="[45]"></a>char_present</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getchar_present
</UL>

<P><STRONG><a name="[49]"></a>flash_identify</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, start.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_identify
</UL>

<P><STRONG><a name="[47]"></a>cpu_identify</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_identify &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_identify
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[4a]"></a>start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = start &rArr; sysinit &rArr; fei_fee &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outSRS
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_identify
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2e]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, start.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SystemInit &rArr; start &rArr; sysinit &rArr; fei_fee &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>sysinit</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, sysinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sysinit &rArr; fei_fee &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_reset
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fei_fee
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[51]"></a>enable_abort_button</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysinit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
</UL>

<P><STRONG><a name="[a9]"></a>clk_out_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sysinit.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arm_cm0.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>wait</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, arm_cm0.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>write_vtor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arm_cm0.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>enable_irq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, arm_cm0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_abort_button
</UL>

<P><STRONG><a name="[53]"></a>disable_irq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, arm_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disable_irq &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_reset
</UL>

<P><STRONG><a name="[54]"></a>set_irq_priority</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, arm_cm0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[15]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[16]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[1f]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[6]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[7]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[8]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[9]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[ad]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[d]"></a>LLW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[22]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[c]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[21]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[1c]"></a>PIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[24]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[25]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[a]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[f]"></a>Reserved_25_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[11]"></a>Reserved_27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[13]"></a>Reserved_29_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[14]"></a>Reserved_30_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[19]"></a>Reserved_35_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[1d]"></a>Reserved_39_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[1e]"></a>Reserved_40_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[23]"></a>Reserved_45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[10]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[17]"></a>TPM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[18]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[20]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl05z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl05z4.o(.ARM.__at_0x00)
</UL>
<P><STRONG><a name="[ae]"></a>blpe_fbe</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mcg.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>fbe_blpe</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mcg.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>fll_freq</STRONG> (Thumb, 396 bytes, Stack size 0 bytes, mcg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fee_fei
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbi_fei
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbi_fee
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbe_fee
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbe_fei
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fei_fee
</UL>

<P><STRONG><a name="[55]"></a>fbe_fei</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
</UL>

<P><STRONG><a name="[57]"></a>fbe_fee</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
</UL>

<P><STRONG><a name="[b0]"></a>fee_fbe</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, mcg.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>fbe_fbi</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[b1]"></a>fbi_fbe</STRONG> (Thumb, 414 bytes, Stack size 20 bytes, mcg.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>fbi_blpi</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[5a]"></a>blpi_fbi</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[5b]"></a>fbi_fee</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
</UL>

<P><STRONG><a name="[5c]"></a>fee_fbi</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[5d]"></a>fbi_fei</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
</UL>

<P><STRONG><a name="[5e]"></a>fei_fbi</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[5f]"></a>fee_fei</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
</UL>

<P><STRONG><a name="[61]"></a>what_mcg_mode</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
</UL>

<P><STRONG><a name="[60]"></a>atc</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, mcg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;what_mcg_mode
</UL>

<P><STRONG><a name="[b2]"></a>clk_monitor_0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mcg.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>fei_fbe</STRONG> (Thumb, 402 bytes, Stack size 20 bytes, mcg.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>fei_fee</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, mcg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = fei_fee &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fll_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[b4]"></a>fee_32OSC</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, mcg.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>rtc_init</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_irq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
</UL>

<P><STRONG><a name="[67]"></a>rtc_reg_report</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b5]"></a>rtc_isr</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>rtc_second_isr</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_char
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4d]"></a>rtc_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtc_reset &rArr; disable_irq &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[b6]"></a>rtc_updated_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>uart0_init</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart0_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[42]"></a>uart0_getchar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_GetChar
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_char
</UL>

<P><STRONG><a name="[44]"></a>uart0_putchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_char
</UL>

<P><STRONG><a name="[46]"></a>uart0_getchar_present</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_present
</UL>

<P><STRONG><a name="[4c]"></a>outSRS</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, rcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = outSRS &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[69]"></a>SER_PutChar</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SER_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[6a]"></a>SER_GetChar</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[30]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; SER_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[6b]"></a>fgetc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_GetChar
</UL>

<P><STRONG><a name="[b7]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>

<P><STRONG><a name="[b8]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>List_initialize</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = List_initialize &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_initialize
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_initialize
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_initialize
</UL>

<P><STRONG><a name="[6f]"></a>List_clear</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[71]"></a>List_add</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = List_add &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_resume
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_setReady
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_update
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_attach
</UL>

<P><STRONG><a name="[72]"></a>List_remove</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, list.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_dettach
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_done
</UL>

<P><STRONG><a name="[73]"></a>List_removeFront</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = List_removeFront &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_getNextEvt
</UL>

<P><STRONG><a name="[74]"></a>List_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = List_get
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_getNextEvt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_done
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_update
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_notify
</UL>

<P><STRONG><a name="[76]"></a>List_size</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = List_size
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_getNextEvt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_done
</UL>

<P><STRONG><a name="[39]"></a>Observer_initialize</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, observer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Observer_initialize &rArr; List_initialize &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>Observer_update</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, observer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Observer_update &rArr; List_add &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_get
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_add
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_notify
</UL>

<P><STRONG><a name="[79]"></a>Observer_done</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, observer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_get
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_remove
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[3c]"></a>OS_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>OS_run</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_run &rArr; Task_start
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>OS_kill</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_prio
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>

<P><STRONG><a name="[3e]"></a>OS_schedule</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OS_schedule &rArr; schedule &rArr; Task_setReady &rArr; List_add &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>OS_schedule_once</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
</UL>

<P><STRONG><a name="[b9]"></a>OS_log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>Task_resume</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_add
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timertask_callback
</UL>

<P><STRONG><a name="[38]"></a>Task_initialize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Task_initialize &rArr; List_initialize &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>Task_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_start
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_run
</UL>

<P><STRONG><a name="[86]"></a>Task_suspend</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>

<P><STRONG><a name="[35]"></a>Task_yield</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_yield
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_exec
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_exec
</UL>

<P><STRONG><a name="[81]"></a>Task_isYield</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_isYield
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
</UL>

<P><STRONG><a name="[7e]"></a>Task_isReady</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_isReady
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
</UL>

<P><STRONG><a name="[7f]"></a>Task_setRunning</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_setRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
</UL>

<P><STRONG><a name="[87]"></a>Task_setWaiting</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>

<P><STRONG><a name="[82]"></a>Task_setReady</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Task_setReady &rArr; List_add &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_add
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
</UL>

<P><STRONG><a name="[88]"></a>Task_setStop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>

<P><STRONG><a name="[89]"></a>Task_getNextEvt</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Task_getNextEvt &rArr; List_size
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_get
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_removeFront
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_execCb
</UL>

<P><STRONG><a name="[80]"></a>Task_execCb</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Task_execCb &rArr; Task_getNextEvt &rArr; List_size
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_getNextEvt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule
</UL>

<P><STRONG><a name="[7c]"></a>Task_prio</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_kill
</UL>

<P><STRONG><a name="[3a]"></a>Topic_initialize</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, topic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Topic_initialize &rArr; List_initialize &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>Topic_notify</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, topic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Topic_notify &rArr; Observer_update &rArr; List_add &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_update
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_get
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_exec
</UL>

<P><STRONG><a name="[3b]"></a>Topic_attach</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, topic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Topic_attach &rArr; List_add &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_add
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>Topic_dettach</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, topic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exception_throw
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_remove
</UL>

<P><STRONG><a name="[3f]"></a>Exception_getMessage</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, exception.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>Exception_throw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, exception.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_dettach
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_getNextEvt
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_setStop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_setWaiting
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_suspend
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_resume
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_setRunning
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_setReady
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_prio
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_isYield
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_isReady
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_execCb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_kill
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_done
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_update
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_get
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_notify
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_initialize
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Topic_attach
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_yield
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_initialize
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_initialize
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_run
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fei_fbi
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fee_fbi
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbi_fee
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blpi_fbi
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbi_blpi
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbe_fbi
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbe_fee
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fei_fee
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emitter_exec
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Observer_update
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atc
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[be]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[8c]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[32]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[bf]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[c0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[c1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[92]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9b]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c3]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[36]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_second_isr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_reg_report
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_irq_priority
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_irq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outSRS
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_identify
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;actuator_exec
</UL>

<P><STRONG><a name="[c4]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[40]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[48]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, start.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_identify
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7d]"></a>schedule</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = schedule &rArr; Task_setReady &rArr; List_add &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_setRunning
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_setReady
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_isYield
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_isReady
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_execCb
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_schedule_once
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_schedule
</UL>

<P><STRONG><a name="[85]"></a>timertask_callback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_resume
</UL>

<P><STRONG><a name="[9d]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9c]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[a0]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9f]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
